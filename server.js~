

var express = require('express');
var blogapp = express();
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var db_file = "blog.db";

// sqllite middleware
var sqlite3 = require('sqlite3').verbose();
var db = new sqlite3.Database(db_file);

// body-parser middlewares

blogapp.use(bodyParser.json());
blogapp.use(bodyParser.urlencoded({extended: false}));
blogapp.use(cookieParser());


// creating the blog table
db.serialize(function() {
    db.run("CREATE TABLE IF NOT EXISTS blogs (post_id INTEGER, title TEXT, body TEXT)");
});


// generates the random number
function get_id() {
	return Math.floor(Math.random()*101) * (999999 -100000 ) + 10000;
}



// route to get all the blogs
blogapp.get('/blogs', function(req, res){
    db.all("SELECT * FROM blogs", function(err, rows){
    	console.log(rows);
        res.json(rows);
    });
});

// routes to post a blog
blogapp.post('/blog', function(req, res){
	console.log(req.body);
	blog = req.body 
	post_id = get_id();
    // we can add a function to check redundancy blogs
    db.run("INSERT INTO blogs (post_id, title, body) VALUES (?, ?, ?)", post_id, blog["title"], blog["body"], function(err, row){
        if (err){
            console.err(err);
            res.status(500);
            res.send({"status": "error_inserting"});
        }
        else {
            res.status(200);
            res.send({"status": "successfully stored"});
        }
        res.end();
    });
});



// Server listening at 8089
blogapp.listen(8089);

console.log("Server is running on port 8089...");



